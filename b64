-- b64.lua
-- Pure Lua Base64 codec, designed like sha256.lua

local M = {}

local chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
local bytes = {}
for i = 1, #chars do
    bytes[chars:sub(i,i)] = i-1
end

function M.encode(data)
    local result = {}
    local pad = (3 - (#data % 3)) % 3
    for i = 1, #data, 3 do
        local n = (string.byte(data, i) or 0) << 16
                | (string.byte(data, i+1) or 0) << 8
                | (string.byte(data, i+2) or 0)
        for j = 18, 0, -6 do
            local idx = (n >> j) & 63
            table.insert(result, chars:sub(idx+1, idx+1))
        end
    end
    for i = 1, pad do result[#result] = '=' end
    return table.concat(result)
end

function M.decode(data)
    data = data:gsub("%s", "")
    if #data % 4 ~= 0 then return nil, "Invalid length" end
    local result = {}
    for i = 1, #data, 4 do
        local n, pad = 0, 0
        for j = 0, 3 do
            local c = data:sub(i+j,i+j)
            if c == '=' then
                n = n << 6
                pad = pad + 1
            else
                local val = bytes[c]
                if not val then return nil, "Invalid character: "..c end
                n = (n << 6) | val
            end
        end
        for j = 16, 0, -8 do
            if pad < 3 then
                table.insert(result, string.char((n >> j) & 255))
            end
            pad = pad - 1
        end
    end
    return table.concat(result)
end

return M
