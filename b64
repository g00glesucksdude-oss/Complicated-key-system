local b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
local b64bytes = {}
for i = 1, #b64chars do
    b64bytes[b64chars:sub(i,i)] = i-1
end

local function base64_encode(data)
    local bytes = {data:byte(1, #data)}
    local result = {}
    local pad = (3 - (#bytes % 3)) % 3
    for i = 1, #bytes, 3 do
        local n = (bytes[i] or 0) << 16 | (bytes[i+1] or 0) << 8 | (bytes[i+2] or 0)
        for j = 18, 0, -6 do
            local idx = (n >> j) & 63
            table.insert(result, b64chars:sub(idx+1, idx+1))
        end
    end
    for i = 1, pad do result[#result] = '=' end
    return table.concat(result)
end

local function base64_decode(data)
    data = data:gsub("%s", "") -- strip whitespace
    if #data % 4 ~= 0 then return nil, "Invalid length" end
    local result = {}
    for i = 1, #data, 4 do
        local n = 0
        local pad = 0
        for j = 0, 3 do
            local c = data:sub(i+j,i+j)
            if c == '=' then
                n = n << 6
                pad = pad + 1
            else
                local val = b64bytes[c]
                if not val then return nil, "Invalid character: "..c end
                n = (n << 6) | val
            end
        end
        for j = 16, 0, -8 do
            if pad < 3 then
                table.insert(result, string.char((n >> j) & 255))
            end
            pad = pad - 1
        end
    end
    return table.concat(result)
end

return {
    encode = base64_encode,
    decode = base64_decode
}
